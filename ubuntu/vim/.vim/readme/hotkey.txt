*yslin_readme.txt*     All hotkey I usually use.   Last change: 2011 May 15

1. Visual模式指令 
1.1. motion
1.1.7. Marks					*mark-motions* *E20* *E78*
1.1.9. Various motions				*various-motions*
1.2. repeating
1.2.1. Single repeats					*single-repeat*
1.2.2. Multiple repeats				
1.2.3. Complex repeats
1.3. 多窗口命令(:h q_wi  :h window-resize) 
1.4. 折叠(:h q_fo) 
1.5. diff使用(:h diff) 
1.6. adding and subtracting
1.7. Formatting text 自動排列字數換行
1.8. Setting options
2. Ex模式指令
2.1. MAP指令 
2.2. changing
2.2.3. Simple changes					*simple-change*
2.3. 強大的收尋與替換(Find/Replace)
2.3.1. Normal Substitution
2.3.2. Regular Expression Substitution/Search
2.3.3. Substitution with Function 
2.3.4. Using the current word or registers
2.3.5. Expression register "=			*quote_=* *quote=* *@=*
2.4. 模式切換與map對照表
2.5. 備份/還原環境(session/viminfo)
2.6. quickfix(快速修正)
2.7. filetype settings

search 2.2並且將游標停在第二個2上
/^2\.\zs2
<C-A>或<C-A>a在screen的界面中增加數字
然後用.來重複執行使用n找下一個

无聊的时候，还可以试试（呵呵！）：
:help!
:help 42
:help holy-grail
==============================================================================
1. Visual模式指令 

K                      函式查詢,若您在VIM中撰寫C/C++程式可以在C/C++標準函式厙
                       提供的函式名字上按「K」，便可以呼叫man page,先按數字再
		       按K就相當於`man 數字 函式`

=                      自動程式縮排對齊,若您在VIM中撰寫C/C++程式，可以利用「gg」
                       指令將游標移到視窗最上方、利用「v」切換到選取模式、再用
		       「G」將游標移到檔案尾端(即達到全選的功能)，最後按「=」，
		       VIM便會幫你的程式做自動對齊

gQ                     進入Ex模式,輸入visual可以返回正常模式。
                       可以按tab補完,<Ctrl-D>顯示補完一覽

q:                     顯示Ex歷史指令,打開Ex command-line視窗必且列出所有Ex歷史指令

q/          or      
q?                     顯示歷史搜尋字串,打開一個視窗顯示紀錄過的搜尋字串

qq                     打開紀錄器,再按一次q關閉紀錄,紀錄中無法使用下列查詢歷史指令

:[range]x[it][!] [++opt] [file]
			Like ":wq", but write only when changes have been

ZZ			Write current file, if modified, and quit (same as
                        :x).

ZQ			Quit without checking for changes (same as ":q!").

1.1.7. Marks					*mark-motions* *E20* *E78*
Jumping to a mark can be done in two ways:
1. With ` (backtick):	  The cursor is positioned at the specified location
			  and the motion is |exclusive|.
2. With ' (single quote): The cursor is positioned on the first non-blank
			  character in the line of the specified location and
			  the motion is linewise.

						*m* *mark* *Mark*
m{a-zA-Z}		Set mark {a-zA-Z} at cursor position (does not move
			the cursor, this is not a motion command).

:marks			List all the current marks (not a motion command).

'.  `.			To the position where the last change was made.
                        跳转到最近修改过的位置

1.1.9. Various motions				*various-motions*
%			Find the next item in this line after or under the
			cursor and jump to its match. |inclusive| motion.
                        跳转到与之匹配的括号处

1.2. repeating

1.2.1. Single repeats					*single-repeat*
.			Repeat last change, with count replaced with [count].
@:			Repeat last command-line [count] times.

1.2.2. Multiple repeats					*multi-repeat*
:[range]g[lobal]/{pattern}/[cmd]
                        可以利用為收尋字串列出所有行數

1.2.3. Complex repeats					*complex-repeat*
q{0-9a-zA-Z"}           Record typed characters into register {0-9a-zA-Z"}
q                       Stops recording.  
@{0-9a-z".=*}           Execute the contents of register {0-9a-z".=*} [count]
                        times. 
@@                      Repeat the previous @{0-9a-z":*} [count] times.
:[addr]*{0-9a-z".=}                                             |:@| |:star|
:[addr]@{0-9a-z".=*}    Execute the contents of register {0-9a-z".=*} as an Ex
                        command.  First set cursor at line [addr] (default is
			current line).
:[addr]@:               Repeat last command-line.
:[addr]@@               Repeat the previous :@{0-9a-z"}.

1.3 多窗口命令(:h q_wi  :h window-resize) 
CTRL-W s  或  :sp[lit]	    将窗口分割成上下两視窗          (split)
:sp[lit] {file}		    分隔窗口并在上視窗中编辑{file}
CTRL-W v  或  :vs[plit]	    将窗口分割左右成两視窗          (vsplit)
:vs[plit] {file}	    分隔窗口并在左視窗中编辑{file}
:vertical {cmd}		    使命令{cmd} 垂直分割
:sf[ind] {file}		    分割窗口，从{path}中找到文件{file}并编辑之。 
CTRL-W ]		    分割窗口并跳转到光标下的标签
CTRL-W f		    分割窗口并编辑光标下的文件名 (file)
CTRL-W ^		    分割窗口并编辑轮换文件
CTRL-W n  或  :new	    创建新空白窗口              (new)
CTRL-W q  或  :q[uit]	    退出编辑并关闭窗口          (quit)
CTRL-W c  或  :cl[ose]	    隐藏当前缓冲区并关闭窗口    (close)
CTRL-W o  或  :on[ly]	    使当前窗口成为唯一窗口      (only)

CTRL-W j		    跳转到下方窗口
CTRL-W k		    跳转到上方窗口
CTRL-W CTRL-W		    移动光标至下方窗口 (折转)   (Wrap)
CTRL-W W		    移动光标至上方窗口 (折转)   (wrap)
CTRL-W t		    跳转到顶端窗口              (top)
CTRL-W b		    跳转到底端窗口              (bottom)
CTRL-W p		    跳转到上一次激活的窗口      (previous)
CTRL-W r		    向下旋转窗口                (rotate)
CTRL-W R		    向上旋转窗口                (Rotate)
CTRL-W x		    将当前窗口与下一个窗口对调  (eXchange)

CTRL-W =		    使所有窗口等高
CTRL-W - 		    减少当前窗口高?    
CTRL-W +		    增加当前窗口高度
CTRL-W _		    设置当前窗口高度 (缺省: 很高)
CTRL-W <       		    Decrease current window width by N (default 1).
CTRL-W >        	    Increase current window width by N (default 1).  

1.4. 折叠(:h q_fo) 

set foldmethod=manual	    手动折叠
set foldmethod=indent	    按照缩进折叠
set foldmethod=expr	    按照表达式 'foldexpr' 折叠
set foldmethod=syntax	    按照语法区域折叠
set foldmethod=marker	    按照标志 'foldmarkers' 折叠

zf{motion}		    操作符:手动定义一个折叠    (fold)
:{range}fold		    将范围{range}包括的行定义为一个折叠
zd			    删除光标下的一个折叠        (delete)
zD			    删除光标下的所有折叠        (Delete)

zo			    打开光标下的折叠            (open)
zO			    打开光标下的所有折叠        (Open)
zc			    关闭光标下的一个折叠        (close)
zC			    关闭光标下的所有折叠        (Close)

zm			    折起更多: 减少 'foldlevel'  (more)
zM			    关闭所有折叠: 置 'foldlevel' 为 0
zr			    减少折叠: 增加 'foldlevel'  (reduce)
zR			    打开所有折叠: 置 'foldlevel' 为最大

zn			    不折叠: 复位 'foldenable'   (none)
zN			    正常折叠: 置位 'foldenable' (Normal)
zi			    反转 'foldenable'           (invert)

1.5. diff使用(:h diff) 

command line進入diff模式:
vimdiff file1 file2 [file3 [file4]] 
vim -d file1 file2 [file3 [file4]]         

已在Vim中时，你可以用3种方式进入diff模式。
:diffs[plit] {filename}                                   |:diffs| |:diffsplit|
                对 {filename} 开一个新窗口。当前的和新开的窗口被设定了和
                "vimdiff" 一样的参数。参考 'diffexpr'。
                                                        |:difft| |:diffthis|
:difft[his]     使当前窗口成为 diff 窗口的一部分。设定了和 "vimdiff" 同样的
                参数。用:diffoff關閉
:diffp[atch] {patchfile}                                  |:diffp| |:diffpatch|
                使用当前的缓冲，用 {patchfile} 给它打上补丁并打开一个缓冲显示
                结果。设定了和 "vimdiff" 同样的参数。
                {patchfile} 可以是任何一种 "patch" 程序认识的或 'patchexpr'
                可以处理的格式。
                备注: {patchfile} 只能包含一个文件的比较结果，即当前文件的。如
                果 {patchfile} 也包含了其他文件的比较，结果将不可预知。Vim 改
                变目录到 /tmp 以避免当前目录被意外的打补丁。但它仍可能导致若干
                ".rej" 文件产生。当绝对路径名出现时，这些文件可能被打补丁。

要垂直分割窗口，加上 |:vertical|。如：
:vert diffsplit main.c
:vert diffpatch /tmp/diff

但你改变文本时，Vim 试图使比较保持更新。插入或删除行一般会使 diff 正确的更新。
在一行里的改动和更复杂的改动将不会使比较更新。要强制刷新比较使用：
:diffupdate     

:diffoff	關閉diff功能參數

有两条命令可用于在 diffs 之间跳转： >
[c      	向后至上一个更改的开始。当加上个数字后，便重复执行相应次。
]c      	向前至下一个更改的开始。当加上个数字后，便重复执行相应次。

拷貝diffs
:[range]diffg[et] [bufspec]
                用另一个缓冲来修改当前的缓冲，消除不同之处。如果给定
                [bufspec]，就使用该缓冲。否则，它仅当有另一个在 diff 模式下
                的缓冲时才起作用。
                [range] 参考下面。
:[range]diffpu[t] [bufspec]
                用当前缓冲来修改另一个缓冲，消除不同之处。就象 ":diffget"
                但更改的是另一个缓冲，而不是当前的。
                [range] 参考下面。
do              同 ":diffget" 但没有参数和范围。"o" 表示 "obtain" （"dg"
                是不能这样使用的。那可能是 "dgg" 的开始！）。
dp              同 ":diffput" 但没有参数和范围。

参数 [bufspec] 可以是一个缓冲的序号，一个缓冲名称或缓冲名称的一部分的模式，如：
:diffget        使用另一个进入 diff 模式的缓冲
:diffget 3      使用3号缓冲
:diffget v2     使用缓冲名同 "v2" 匹配的，并进入 diff 模式的（如，"file.c.v2"）


1.6. adding and subtracting
                                                        CTRL-A
CTRL-A                  Add [count] to the number or alphabetic character at
                        or after the cursor.  {not in Vi}

                                                        CTRL-X
CTRL-X                  Subtract [count] from the number or alphabetic
                        character at or after the cursor.  {not in Vi}

將指標移動到下面的數字100上按下CTRL-A和CTRL-X來增加和減少數字
100  In linux screen, press ctrl+a, a to increase 100 to 101.

1.7. Formatting text					|formatting|
Wrap Existing Text at 80 Characters in Vim
        :set textwidth=80
        gggqG   "可能會造成join許多不同的短行為一行
        用假指令q2gqq<CR>q99@2
                          ^^處理99行
                        'textwidth' 'formatexpr' 'formatprg' 'formatoptions'
gq{motion}		Format the lines that {motion} moves over.

gw{motion}		Format the lines that {motion} moves over.  Similar to
			|gq| but puts the cursor back at the same position in
                        the text.
                        
							|fo-table|
You can use the 'formatoptions' option  to influence how Vim formats text.

set formatoptions+=mB 可以实现在中文字符间折行，但会出现。，等出现在行首的情况。

Vim 中 formatoptions 的缺省值是tcq，一般我会在 .vimrc 文件中加入一行
set formatoptions+=mM来确保 Vim 能在中文字符之间折行而不要求空格的存在，
并且在大部分情况下可以正确地处理中文重新格式化。


1.8. Setting options                                   |option-summary|

set virtualedit=all     可以編輯沒有文字的地方,方便加入一些文字在每行的尾端.
==============================================================================
2. Ex模式指令 
:set all 			顯示所有vim支援的參數
:version 			顯示讀取的vimrc順序和路徑
:set [cmd]? 			查看這個指令的目前設定
:set runtimepath        	設定執行自動載入的script路徑
:runtime! syntax/2html.vim 	產生html格式的.vimrc
:TOhtml                         根据 Vim 的语法加亮的方式生成HTML代码
:tab ball                       把所有vim a b c打開的所有buffer用tab方式開啟
:%s/<Ctrl-R>0<CR>//gc           把本文和上次複製到暫存器0的內容符合的字串都刪除

在 vim 裡面的暫存區(register)中，register 0 是作刪除或是 yank
動作時，預設使用的暫存器。
/<Ctrl-R>0<CR>
就會把暫存器0的內容填上,然後再按enter來收尋

2.1. MAP指令 
:map	{lhs} {rhs}		|mapmode-nvo|		|:map|
:nm[ap]	{lhs} {rhs}		|mapmode-n|		|:nm| |:nmap|
:vm[ap]	{lhs} {rhs}		|mapmode-v|		|:vm| |:vmap|
:xm[ap]	{lhs} {rhs}		|mapmode-x|		|:xm| |:xmap|
:smap	{lhs} {rhs}		|mapmode-s|		      |:smap|
:om[ap]	{lhs} {rhs}		|mapmode-o|		|:om| |:omap|
:map!	{lhs} {rhs}		|mapmode-ic|		|:map!|
:im[ap]	{lhs} {rhs}		|mapmode-i|		|:im| |:imap|
:lm[ap]	{lhs} {rhs}		|mapmode-l|		|:lm| |:lmap|
:cm[ap]	{lhs} {rhs}		|mapmode-c|		|:cm| |:cmap|

有六种映射存在  |vim-modes-intro| |vim-modes|
- 用于普通模式: 输入命令时。(ex: "x", "dd", "gg", "G", "0", "$", "*")
- 用于可视模式: 可视区域高亮并输入命令时。(ex: "v", "V", <C-v>)
- 用于选择模式: 类似于可视模式，但键入的字符对选择区进行替换。
  要先設定:set selectmode+=mouse,在MS-Windows可能已經設好了,用滑鼠選字,然後
  輸入的字可以替換掉被選亮的區塊
- 用于操作符等待模式: 操作符等待中 ("d"，"y"，"c" 等等之后)。
- 用于插入模式: 也用于替换模式。(ex: "i", "a", "o", "R")
- 用于命令行模式: 输入 ":" 或 "/" 命令时。

2.2. changing
<C-V>{motion}I
                        可以將圈選的行同時插入你輸入的文字,插入在游標前
<C-V>{motion}A
                        可以將圈選的行同時插入你輸入的文字,插入在游標後

2.2.3. Simple changes					*simple-change*

gU{motion}		Make {motion} text uppercase. {not in Vi}
gUw                     光标下的单词变为大写

gu{motion}		Make {motion} text lowercase. {not in Vi}
guw                     光标下的单词变为小写

guu             lowercase line
gUU             uppercase line
~               invert case (upper->lower; lower->upper) of current character

2.3. 強大的收尋與替換(Find/Replace)
Use g* or g# if you don't want to search for the exact word.

|:substitute|
|:s| |:su|

:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]
			For each line in [range] replace a match of {pattern}
			with {string}.
			For the {pattern} see |pattern|.
			{string} can be a literal string, or something
			special; see |sub-replace-special|.
			When [range] and [count] are omitted, replace in the
			current line only.
			When [count] is given, replace in [count] lines,
			starting with the last line in [range].  When [range]
			is omitted start in the current line.
			Also see |cmdline-ranges|.
			See |:s_flags| for [flags].

When searching:
    ., *, \, [, ], ^, and $ are metacharacters.
    +, ?, |, {, }, (, and ) must be escaped to use their special function.
    \/ is / (use backslash + forward slash to search for forward slash)
    \t is tab, \s is whitespace
    \n is newline, \r is CR (carriage return = Ctrl-M = ^M)
    \{#\} is used for repetition. /foo.\{2\} will match foo and the two
    following characters. The \ is not required on the closing } so /foo.\{2}
    will do the same thing.
    \(foo\) makes a backreference to foo. Parenthesis without escapes are
    literally matched. Here the \ is required for the closing \).
When replacing:
    \r is newline, \n is a null byte (0x00).
    \& is ampersand (& is the text that matches the search pattern).
    \1 inserts the text of the first backreference. \2 inserts the second
    backreference, and so on.

2.3.1. Normal Substitution
  -Substitute all occurrences of a text with another text in the whole file
     :%s/old-text/new-text/g

     ‘%’ - means do substitution in the entire file
     'g' - specifies all occurrences

  -Substitution of a text with another text within a single line
     :s/I/We/gi

     'i' - case insensitive

  -Substitution of a text with another text within a range of lines
     :1,10s/helo/hello/g

  -Changes each 'foo' to 'bar' for all lines between the current line (.) and the last line ($).
     :.,$s/foo/bar/g     

  -Changes each 'foo' to 'bar' for the current line (.) and the two next lines (+2).
     :.,+2s/foo/bar/g    

     :%s is equivalent to :1,$s

  -Substitution of a text with another text by visual selection of lines
     :'<,'>s/helo/hello/g

     select a specific lines by visually selecting those lines. Press CTRL + V in
     command mode, use navigation keys to select the part of the file you want to
     be substituted. Press ‘:’ which will automatically formed as :’<,’> Then you
     can use the normal substitute

  -Substitution of a text with another text only the 1st X number of lines
     :s/helo/hello/g 4

  -Interactive Find and Replace in Vim Editor
     :%s/awesome/wonderful/gc

  -Replace last search string from current line(.) to the end of the file($).
     :.,$s//newName/gc

2.3.2. Regular Expression Substitution/Search
Substitution
  -Substitute only the whole word and not partial match
     :s/\<his\>/her/

  -Substitute either word1 or word2 with a new word using regular expression
     :%s/\(good\|nice\)/awesome/g
     :%s/\<\(hey\|hi\)\>/hai/g

  -On each line, delete the whole word "foo" and all following text (to end of line). 
     :%s/\<foo\>.*// 

  -On each line, delete the whole word "foo" and the following five characters. 
     :%s/\<foo\>.\{5}// 

  -On each line, delete all text following the whole word "foo" (to end of line). 
     :%s/\<foo\>\zs.*// 

  -On each line, delete the whole word "foo" and all preceding text (from beginning of line). 
     :%s/.*\<foo\>// 

  -On each line, delete all the text preceding the whole word "foo" (from beginning of line). 
     :%s/.*\ze\<foo\>// 

  -On each line, delete all the text preceding and following the whole word "foo".
     :%s/.*\(\<foo\>\).*/\1/ 

  -將foo替換成aafooaa, |s/\0|
     :%s/foo/aaa\0aaa/g

  -Insert line numbers
     :%s/^/\=printf('%-4d', line('.'))

  -Use either of the following commands to delete all empty lines:
     :g/^$/d
     :v/./d

  -If you want to delete all lines that are empty or that contain only whitespace
   characters (spaces, tabs), use either of:
     :g/^\s*$/d
     :v/\S/d

Search
  -if you want to look at this list and jump quickly between the matches,
   consider using
     :vimgrep example %
   or
     :grep example %

   This will populate the "error list" with all of the matches so that you can
   use :copen to list them all in the quickfix buffer, press enter on a
   particular line to jump to that match, or use commands like :cn and :cp to
   go back and forth.


  -This will list all occurrences of the word under the cursor. It may be more
  than you need though, because it will also search any files that are
  included in the current file.
    [I

  But the nice thing about this command is that the search result display also
  shows a count of the number of matches, in addition to the line number of
  each match.
    :help include-search

  -Search and list all lines match the {pat}
     :g/{pat}/p

  -List all lines containing the word
     :g/

  -Search /\%d65 or with /\%x41 both find 'A' (character decimal 65 = hex 41)

  -Search /\%d8211 or with /\%u2013 both find '–' (a Unicode en dash).

  -matches an "if" at the start of a line, ignoring white space.
     /^\s*\zsif
   Example: 
     if (found and only match if)
     you think if (not found)

  -match first space after non space string from the start of the line and all characters after it.
     /^\S\+\zs.*
   Example:
notmatched all are matched

  -match function name and its return type is void, use \zs and \ze to match
   the function name by \S\+
     /void\s*\zs\S\+\ze(
   Example:
     void printf(char *fmt);
2.3.3. Substitution with Function 
  -Substituting all lines with its line number
     :%s/^/\=line(".") . ". "/g

  -Substituting special character with its equivalent value
     :%s!\~!\= expand($HOME)!g
     :%s/\~/\= expand($HOME)/g 

  -Alter sequence number in a numbered list while inserting a new item
     :4,$s/\d\+/\=submatch(0) + 1/

     Range: 4,$ – 4th line to last line.
     Pattern to Search – \d\+ – digits seque
     Pattern to Replace – \=submatch(0) + 1 – gets the matched pattern and adds 1 to 
     Flag – as there is no flag, by default it substitutes only the first occurren

  -Substituting the sentence beginnings with upper case. ( i.e title case the entire document )
     :%s/\.\s*\w/\=toupper(submatch(0))/g

     \.\s*\w – Search Pattern – literal . ( dot ) followed by Zero or more space, and a word character
     toupper – converts the given text to upper case
     submatch(0) – returns the matched patter

  -替換目前所在行為目錄名稱,用@取代平常的/,不一定要用/當作分隔#,!也可以
     :s@\n@\="\r" . expand("$HOME") . "\r"@

2.3.4. Using the current word or registers
  -Replace each match of the last search pattern with 'bar'.
     :%s//bar/g 
 
     For example, you might first place the cursor on the word foo then press * 
     to search for that word. The above substitute would then change all words 
     exactly matching 'foo' to 'bar'. 

  -Replace each occurrence of 'foo' with the word under the cursor. 
     :%s/foo/<c-r><c-w>/g 
     
     <c-r><c-w> means that you press Ctrl-R then Ctrl-W. 
     The word under the cursor will be inserted as though you typed it. 

  -Replace each occurrence of 'foo' with the WORD under the cursor (delimited by whitespace). 
     :%s/foo/<c-r><c-a>/g 
     
     <c-r><c-a> means that you press Ctrl-R then Ctrl-A. 
     The WORD under the cursor will be inserted as though you typed it. 

  -Replace each occurrence of 'foo' with the contents of register 'a'. 
     :%s/foo/<c-r>a/g 

     <c-r>a means that you press Ctrl-R then a. 
     The contents of register 'a' will be inserted as though you typed it. 

  -Replace each occurrence of 'foo' with the contents of register 'a'. 
     :%s/foo/\=@a/g 

     \=@a is a reference to register 'a'. 
     The contents of register 'a' is not shown in the command. 
     This is useful if the register contains many lines of text. 

  -Replace each match of the last search pattern with the / register (the last search pattern). 
     :%s//<c-r>//g 

     After pressing Ctrl-R then / to insert the last search pattern 
     (and before pressing Enter to perform the command), 
     you could edit the text to make any required change. 

  -Replace all occurrences of the text in the system clipboard (in the * register) 
   with 'bar' (see next example if multiline). 
     :%s/<c-r>*/bar/g 
     
     On some systems, selecting text (in Vim or another application) is all 
     that is required to place that text in the * register. 

  -Replace all occurrences of the text in register 'a' with 'bar'. 
     :%s/<c-r>a/bar/g 

     <c-r>a means that you press Ctrl-R then a. 
     The contents of register 'a' will be inserted as though you typed it. 
     Any newlines in register 'a' are inserted as ^M and are not found. 
     The search works if each ^M is manually replaced with '\n' (two characters: backslash, 'n'). 
     This replacement can be performed while you type the command: 
	:%s/<c-r>=substitute(@a,"\n",'\\n','g')<CR>/bar/g 
     The @a represents the contents of register a.
     The "\n" (double quotes) represents the single character newline; 
     the '\\n' (single quotes) represents two backslashes followed by 'n'. 
     The substitute() function is evaluated by the <c-r>= (Ctrl-R =) 
     expression register; it replaces each newline with a single backslash followed by 'n'. 
     The <CR> indicates that you press Enter to finish the = expression.

  \@=   Matches the preceding atom with zero width. {not in Vi}
	Like "(?=pattern)" in Perl.
	Example			matches ~
	foo\(bar\)\@=		"foo" in "foobar"
	foo\(bar\)\@=foo	nothing

2.3.5. Expression register "=			*quote_=* *quote=* *@=*
2.3.5.1. Evaluating Math
You can use the expression register to insert some numbers as result from a
calculation. For example, considering you're in insert mode in this file:

        ... the total sum is $
Now hit <c-r>= and type

        5*6+3.2*8+5.52<enter>
And the result is:

        ... the total sum is $61.12
2.3.5.2. Using Variable Values
Let's say you need to number headings in a text. Headings start with a # like in:

# Heading

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo.

# Another Heading

Consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat
non proident, sunt in culpa qui officia deserunt mollit anim id est laborum

Considering it's a long list, you'd need to find a way to do it quickly. Here is one approach:

1.Create a variable to hold the current value
2.Find the next heading
3.Insert the contents of that variable (using the expression register)
4.Increment the variable

This can be done with by first creating the variable:
    :let i=1
And then with a macro:
    qa            ; start recording
    /^#<CR>       ; find next heading
    0w            ; move to the first word
    i             ; switch to insert mode
    <c-r>=i<CR>   ; insert the number
    .<esc>        ; insert a dot and back to normal mode
    :let i+=1<CR> ; increment the variable
    q             ; stop recording

And now you can press @a and use @@ to subsequently insert the numbers in your headings.


2.4. 模式切換與map對照表

|i_esc|
		mode切換方法   				                 ~
		Normal	Visual	Select	Insert	  Replace   Cmd-line  Ex ~
FROM mode								 ~
Normal			v V ^V	  *4	 *1	   R gR     : / ? !   Q
Visual		 *2		  ^G	 c C	    --	      :       --
Select		 *5	^O ^G		 *6	    --	      --      --
Insert		 <Esc>	  --	  --		  <Insert>    --      --
Replace		 <Esc>	  --	  --	<Insert>	      --      --
Command-line	 *3	  --	  --	 :start	    --		      --
Ex		 :vi	  --	  --	 --	    --	      --

*1~6註解請看|i_esc|

[命令--------------------------------] [模式-----------------------------------] 
                                        普通 可视 选择 操作符 插入 命令 Lang-Arg
					       	        等待        行
:map   :noremap   :unmap   :mapclear    是   是   是    是    -    -    -
:nmap  :nnoremap  :nunmap  :nmapclear   是   -    -     -     -    -    -          
:vmap  :vnoremap  :vunmap  :vmapclear   -    是   是    -     -    -    -
:omap  :onoremap  :ounmap  :omapclear   -    -    -     是    -    -    - 
					     可视 选择   
:vmap  :vnoremap  :vunmap  :vmapclear	-    是   是    -     -    -    -
:xmap  :xnoremap  :xunmap  :xmapclear	-    是   -     -     -    -    -
:smap  :snoremap  :sunmap  :smapclear	-    -    是    -     -    -    -
                                                              插入 命令 Lang-Arg
:map!  :noremap!  :unmap!  :mapclear!	-    -    -     -     是   是   -
:imap  :inoremap  :iunmap  :imapclear	-    -    -     -     是   -    -
:cmap  :cnoremap  :cunmap  :cmapclear	-    -    -     -     -    是   -
:lmap  :lnoremap  :lunmap  :lmapclear	-    -    -     -     是*  是*  是*

:map顯示的符號代表一覽
 字 符     模 式   
<Space>    普通、可视、选择和操作符等待
   n       普通
   v       可视和选择
   s       选择
   x       可视
   o       操作符等待
   !       插入和命令行
   i       插入
   l       插入、命令行和 Lang-Arg 模式的 ":lmap" 映射
   c       命令行

{rhs} 之前可能显示一个特殊字符:
   *       表示它不可重映射
   &       表示仅脚本的局部映射可以被重映射
   @       表示缓冲区的局部映射

从 {lhs} 以后的第一个非空字符到行的末尾 (或 '|') 都被认为是 {rhs} 的一部分。这
允许 {rhs} 以一个空格结尾。


2.5. 備份/還原環境(session/viminfo)
要恢复上次的编辑环境，我们需要保存两种不同的信息，
一种是会话(session)信息，另外一种是viminfo信息。

|session|session file会话信息中保存了所有窗口的视图，外加全局设置。
:mksession [file] 	貯存session文件
:source [file]  	载入会话文件
|'sessionoptions'|
:set sessionoptions 	session file中貯存哪些訊息,是由sessionoptions決定的

|viminfo|信息中保存了命令行历史(history)、搜索字符串历史(search)、输入行历史、
非空的寄存器内容(register)、文件的位置标记(mark)、最近搜索/替换的模式、
缓冲区列表、全局变量等信息。
:wviminfo [file] 	貯存viminfo文件
:rviminfo [file]        读入viminfo文件
|21.3|viminfo
:set viminfo  		設定viminfo貯存哪些內容與保存的數量
	' specify how many files for which you save marks (a-z)
	f option controls whether global marks (A-Z and 0-9) are stored
	< option controls how many lines are saved for each of the registers
	:	number of lines to save from the command line history
	@	number of lines to save from the input line history
	/	number of lines to save from the search history
	r	removable media, for which no marks will be stored (can be
		used several times)
	!	global variables that start with an uppercase letter and
		don't contain lowercase letters
	h	disable 'hlsearch' highlighting when starting
	%	the buffer list (only restored when starting Vim without file
		arguments)
	c	convert the text using 'encoding'
	n	name used for the viminfo file (must be the last option)

2.6. quickfix(快速修正)
|quickfix|(To-Do拿幾個open source的makefile來結合試試看,看要設計成怎樣的set makeprg)
:set makeprg=gcc\ -Wall\ -ohello\ hello.c 
:make 

經過上面步驟產生error可以用下面的顯示
:cc                显示目前指到详细错误信息(:help :cc)
:cp                跳到上一个错误(:help :cp) :cp :cprevious 
:cn                跳到下一个错误(:help :cn ) :cN :cNext
:cl                列出所有错误(:help :cl) :cl :clist
:cw                如果有错误列表，则打开quickfix窗口(:help :cw) :cw :cwindow
:col               到前一个旧的错误列表(:help :col) :colder :col
:cnew              到后一个较新的错误列表(:help :cnew) :cnewer :cnew

2.7. 快速查找列表
|:vim| |:vimgrep|
vimgrep(內部grep)來查找檔案內容
:vim[grep][!] /{pattern}/[g][j] {file} ...
例子: >
	:cd ~/src/vim70
	:vimgrep /\<main\>/ ./*.c	查所有目前目錄下的.c檔,中含有main的位置
	:cw 				開啟視窗顯示找到的位置一覽表
:vimgrepa[dd][!] /{pattern}/[g][j] {file} ...
			Just like ":vimgrep", but instead of making a new list
			of errors the matches are appended to the current
			list.

grep(外部grep)來查找檔案內容
:gr[ep][!] [arguments]	
例子: >
	:grep "main" *                  查所有目前目錄下有含main的檔案位置
	:cw 				開啟視窗顯示找到的位置一覽表
:grepa[dd][!] [arguments]
			Just like ":grep", but instead of making a new list of
			errors the matches are appended to the current list.


2.7. filetype settings
Overview:					|:filetype-overview|
:filetype               顯示目前對檔案的處理預設值
:filetype plugin on     enable loading the plugin files for specific file types

command				detection	plugin		indent ~
:filetype on			on		unchanged	unchanged
:filetype off			off		unchanged	unchanged
:filetype plugin on		on		on		unchanged
:filetype plugin off		unchanged	off		unchanged
:filetype indent on		on		unchanged	on
:filetype indent off		unchanged	unchanged	off
:filetype plugin indent on	on		on		on
:filetype plugin indent off	unchanged	off		off

|yslin_vim_plugin| 所有我常用的plugin的指令列表說明

==============================================================================

  vim:tw=78:fo=tcq2:isk=!-~,^*,^\|,^\":ts=4:ft=help:norl:noreadonly
